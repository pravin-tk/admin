package org.school.admin.model;

// Generated Jul 12, 2015 5:47:55 PM by Hibernate Tools 4.0.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

/**
 * ApplicantBasicDetail generated by hbm2java
 */
@Entity
@Table(name = "applicant_basic_detail")
public class ApplicantBasicDetail implements java.io.Serializable {

	private Integer id;
	private UserRegistrationInfo userRegistrationInfo;
	private School school;
	@NotNull(message="First name required.")
	private String firstName;
	private String middleName;
	private String lastName;
	private String image;
	@NotNull(message="Gender required.")
	private String gender;
	@NotNull(message="Date of Birth required.")
	@Pattern(regexp="\\d{4}-\\d{2}-\\d{2}", message="Invalid Date of Birth.")
	private Date dob;
	@NotNull(message="Blood Group required.")
	private String bloodGroup;
	@NotNull(message="Place of Birth required.")
	private String placeOfBirth;
	@NotNull(message="Nationality Required.")
	private String nationality;
	@NotNull(message="Religion required.")
	private String religion;
	private Short catId;
	private String flatNo;
	@NotNull(message="Building/Street name required.")
	private String buildingName;
	@NotNull(message="Locality name required.")
	private String locality;
	private String city;
	private String pincode;
	private Byte status;
	private Set<ApplicantPreSchoolDetail> applicantPreSchoolDetails = new HashSet<ApplicantPreSchoolDetail>(
			0);
	private Set<AppliedSchool> appliedSchools = new HashSet<AppliedSchool>(0);
	private Set<ApplicantPaymentDetail> applicantPaymentDetails = new HashSet<ApplicantPaymentDetail>(
			0);
	private Set<ApplicantParentDetail> applicantParentDetails = new HashSet<ApplicantParentDetail>(
			0);

	public ApplicantBasicDetail() {
	}

	public ApplicantBasicDetail(UserRegistrationInfo userRegistrationInfo,
			School school, String firstName, String middleName,
			String lastName, String image, String gender, Date dob,
			String bloodGroup, String placeOfBirth, String nationality,
			String religion, Short catId, String flatNo, String buildingName,
			String locality, String city, String pincode, Byte status,
			Set<ApplicantPreSchoolDetail> applicantPreSchoolDetails,
			Set<AppliedSchool> appliedSchools,
			Set<ApplicantPaymentDetail> applicantPaymentDetails,
			Set<ApplicantParentDetail> applicantParentDetails) {
		this.userRegistrationInfo = userRegistrationInfo;
		this.school = school;
		this.firstName = firstName;
		this.middleName = middleName;
		this.lastName = lastName;
		this.image = image;
		this.gender = gender;
		this.dob = dob;
		this.bloodGroup = bloodGroup;
		this.placeOfBirth = placeOfBirth;
		this.nationality = nationality;
		this.religion = religion;
		this.catId = catId;
		this.flatNo = flatNo;
		this.buildingName = buildingName;
		this.locality = locality;
		this.city = city;
		this.pincode = pincode;
		this.status = status;
		this.applicantPreSchoolDetails = applicantPreSchoolDetails;
		this.appliedSchools = appliedSchools;
		this.applicantPaymentDetails = applicantPaymentDetails;
		this.applicantParentDetails = applicantParentDetails;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	public UserRegistrationInfo getUserRegistrationInfo() {
		return this.userRegistrationInfo;
	}

	public void setUserRegistrationInfo(
			UserRegistrationInfo userRegistrationInfo) {
		this.userRegistrationInfo = userRegistrationInfo;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "school_id")
	public School getSchool() {
		return this.school;
	}

	public void setSchool(School school) {
		this.school = school;
	}

	@Column(name = "first_name", length = 45)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "middle_name", length = 45)
	public String getMiddleName() {
		return this.middleName;
	}

	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}

	@Column(name = "last_name", length = 45)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "image", length = 128)
	public String getImage() {
		return this.image;
	}

	public void setImage(String image) {
		this.image = image;
	}

	@Column(name = "gender", length = 45)
	public String getGender() {
		return this.gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "dob", length = 10)
	public Date getDob() {
		return this.dob;
	}

	public void setDob(Date dob) {
		this.dob = dob;
	}

	@Column(name = "blood_group", length = 12)
	public String getBloodGroup() {
		return this.bloodGroup;
	}

	public void setBloodGroup(String bloodGroup) {
		this.bloodGroup = bloodGroup;
	}

	@Column(name = "place_of_birth", length = 45)
	public String getPlaceOfBirth() {
		return this.placeOfBirth;
	}

	public void setPlaceOfBirth(String placeOfBirth) {
		this.placeOfBirth = placeOfBirth;
	}

	@Column(name = "nationality", length = 25)
	public String getNationality() {
		return this.nationality;
	}

	public void setNationality(String nationality) {
		this.nationality = nationality;
	}

	@Column(name = "religion", length = 45)
	public String getReligion() {
		return this.religion;
	}

	public void setReligion(String religion) {
		this.religion = religion;
	}

	@Column(name = "cat_id")
	public Short getCatId() {
		return this.catId;
	}

	public void setCatId(Short catId) {
		this.catId = catId;
	}

	@Column(name = "flat_no", length = 25)
	public String getFlatNo() {
		return this.flatNo;
	}

	public void setFlatNo(String flatNo) {
		this.flatNo = flatNo;
	}

	@Column(name = "building_name", length = 80)
	public String getBuildingName() {
		return this.buildingName;
	}

	public void setBuildingName(String buildingName) {
		this.buildingName = buildingName;
	}

	@Column(name = "locality", length = 80)
	public String getLocality() {
		return this.locality;
	}

	public void setLocality(String locality) {
		this.locality = locality;
	}

	@Column(name = "city", length = 45)
	public String getCity() {
		return this.city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	@Column(name = "pincode", length = 10)
	public String getPincode() {
		return this.pincode;
	}

	public void setPincode(String pincode) {
		this.pincode = pincode;
	}

	@Column(name = "status")
	public Byte getStatus() {
		return this.status;
	}

	public void setStatus(Byte status) {
		this.status = status;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "applicantBasicDetail")
	public Set<ApplicantPreSchoolDetail> getApplicantPreSchoolDetails() {
		return this.applicantPreSchoolDetails;
	}

	public void setApplicantPreSchoolDetails(
			Set<ApplicantPreSchoolDetail> applicantPreSchoolDetails) {
		this.applicantPreSchoolDetails = applicantPreSchoolDetails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "applicantBasicDetail")
	public Set<AppliedSchool> getAppliedSchools() {
		return this.appliedSchools;
	}

	public void setAppliedSchools(Set<AppliedSchool> appliedSchools) {
		this.appliedSchools = appliedSchools;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "applicantBasicDetail")
	public Set<ApplicantPaymentDetail> getApplicantPaymentDetails() {
		return this.applicantPaymentDetails;
	}

	public void setApplicantPaymentDetails(
			Set<ApplicantPaymentDetail> applicantPaymentDetails) {
		this.applicantPaymentDetails = applicantPaymentDetails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "applicantBasicDetail")
	public Set<ApplicantParentDetail> getApplicantParentDetails() {
		return this.applicantParentDetails;
	}

	public void setApplicantParentDetails(
			Set<ApplicantParentDetail> applicantParentDetails) {
		this.applicantParentDetails = applicantParentDetails;
	}

}
